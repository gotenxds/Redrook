// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace World
{

using global::System;
using global::FlatBuffers;

public struct TileMap : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TileMap GetRootAsTileMap(ByteBuffer _bb) { return GetRootAsTileMap(_bb, new TileMap()); }
  public static TileMap GetRootAsTileMap(ByteBuffer _bb, TileMap obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TileMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort Tiles(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int TilesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTilesBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetTilesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetTilesArray() { return __p.__vector_as_array<ushort>(4); }
  public bool MutateTiles(int j, ushort tiles) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutUshort(__p.__vector(o) + j * 2, tiles); return true; } else { return false; } }
  public ushort Offset { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public bool MutateOffset(ushort offset) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutUshort(o + __p.bb_pos, offset); return true; } else { return false; } }

  public static Offset<TileMap> CreateTileMap(FlatBufferBuilder builder,
      VectorOffset tilesOffset = default(VectorOffset),
      ushort offset = 0) {
    builder.StartObject(2);
    TileMap.AddTiles(builder, tilesOffset);
    TileMap.AddOffset(builder, offset);
    return TileMap.EndTileMap(builder);
  }

  public static void StartTileMap(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTiles(FlatBufferBuilder builder, VectorOffset tilesOffset) { builder.AddOffset(0, tilesOffset.Value, 0); }
  public static VectorOffset CreateTilesVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTilesVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static void StartTilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddOffset(FlatBufferBuilder builder, ushort offset) { builder.AddUshort(1, offset, 0); }
  public static Offset<TileMap> EndTileMap(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TileMap>(o);
  }
  public static void FinishTileMapBuffer(FlatBufferBuilder builder, Offset<TileMap> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTileMapBuffer(FlatBufferBuilder builder, Offset<TileMap> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
